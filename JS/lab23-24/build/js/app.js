var requirejs,require,define;!function(global){function commentReplace(e,t,n,i){return i||""}function isFunction(e){return"[object Function]"===ostring.call(e)}function isArray(e){return"[object Array]"===ostring.call(e)}function each(e,t){if(e){var n;for(n=0;n<e.length&&(!e[n]||!t(e[n],n,e));n+=1);}}function eachReverse(e,t){if(e){var n;for(n=e.length-1;n>-1&&(!e[n]||!t(e[n],n,e));n-=1);}}function hasProp(e,t){return hasOwn.call(e,t)}function getOwn(e,t){return hasProp(e,t)&&e[t]}function eachProp(e,t){var n;for(n in e)if(hasProp(e,n)&&t(e[n],n))break}function mixin(e,t,n,i){return t&&eachProp(t,function(t,r){(n||!hasProp(e,r))&&(!i||"object"!=typeof t||!t||isArray(t)||isFunction(t)||t instanceof RegExp?e[r]=t:(e[r]||(e[r]={}),mixin(e[r],t,n,i)))}),e}function bind(e,t){return function(){return t.apply(e,arguments)}}function scripts(){return document.getElementsByTagName("script")}function defaultOnError(e){throw e}function getGlobal(e){if(!e)return e;var t=global;return each(e.split("."),function(e){t=t[e]}),t}function makeError(e,t,n,i){var r=new Error(t+"\nhttp://requirejs.org/docs/errors.html#"+e);return r.requireType=e,r.requireModules=i,n&&(r.originalError=n),r}function newContext(e){function t(e){var t,n;for(t=0;t<e.length;t++)if(n=e[t],"."===n)e.splice(t,1),t-=1;else if(".."===n){if(0===t||1===t&&".."===e[2]||".."===e[t-1])continue;t>0&&(e.splice(t-1,2),t-=2)}}function n(e,n,i){var r,a,o,s,u,c,d,p,l,f,h,m,g=n&&n.split("/"),v=w.map,x=v&&v["*"];if(e&&(e=e.split("/"),d=e.length-1,w.nodeIdCompat&&jsSuffixRegExp.test(e[d])&&(e[d]=e[d].replace(jsSuffixRegExp,"")),"."===e[0].charAt(0)&&g&&(m=g.slice(0,g.length-1),e=m.concat(e)),t(e),e=e.join("/")),i&&v&&(g||x)){o=e.split("/");e:for(s=o.length;s>0;s-=1){if(c=o.slice(0,s).join("/"),g)for(u=g.length;u>0;u-=1)if(a=getOwn(v,g.slice(0,u).join("/")),a&&(a=getOwn(a,c))){p=a,l=s;break e}!f&&x&&getOwn(x,c)&&(f=getOwn(x,c),h=s)}!p&&f&&(p=f,l=h),p&&(o.splice(0,l,p),e=o.join("/"))}return r=getOwn(w.pkgs,e),r?r:e}function i(e){isBrowser&&each(scripts(),function(t){return t.getAttribute("data-requiremodule")===e&&t.getAttribute("data-requirecontext")===q.contextName?(t.parentNode.removeChild(t),!0):void 0})}function r(e){var t=getOwn(w.paths,e);return t&&isArray(t)&&t.length>1?(t.shift(),q.require.undef(e),q.makeRequire(null,{skipMap:!0})([e]),!0):void 0}function a(e){var t,n=e?e.indexOf("!"):-1;return n>-1&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function o(e,t,i,r){var o,s,u,c,d=null,p=t?t.name:null,l=e,f=!0,h="";return e||(f=!1,e="_@r"+(A+=1)),c=a(e),d=c[0],e=c[1],d&&(d=n(d,p,r),s=getOwn(j,d)),e&&(d?h=s&&s.normalize?s.normalize(e,function(e){return n(e,p,r)}):-1===e.indexOf("!")?n(e,p,r):e:(h=n(e,p,r),c=a(h),d=c[0],h=c[1],i=!0,o=q.nameToUrl(h))),u=!d||s||i?"":"_unnormalized"+(B+=1),{prefix:d,name:h,parentMap:t,unnormalized:!!u,url:o,originalName:l,isDefine:f,id:(d?d+"!"+h:h)+u}}function s(e){var t=e.id,n=getOwn(S,t);return n||(n=S[t]=new q.Module(e)),n}function u(e,t,n){var i=e.id,r=getOwn(S,i);!hasProp(j,i)||r&&!r.defineEmitComplete?(r=s(e),r.error&&"error"===t?n(r.error):r.on(t,n)):"defined"===t&&n(j[i])}function c(e,t){var n=e.requireModules,i=!1;t?t(e):(each(n,function(t){var n=getOwn(S,t);n&&(n.error=e,n.events.error&&(i=!0,n.emit("error",e)))}),i||req.onError(e))}function d(){globalDefQueue.length&&(each(globalDefQueue,function(e){var t=e[0];"string"==typeof t&&(q.defQueueMap[t]=!0),O.push(e)}),globalDefQueue=[])}function p(e){delete S[e],delete k[e]}function l(e,t,n){var i=e.map.id;e.error?e.emit("error",e.error):(t[i]=!0,each(e.depMaps,function(i,r){var a=i.id,o=getOwn(S,a);!o||e.depMatched[r]||n[a]||(getOwn(t,a)?(e.defineDep(r,j[a]),e.check()):l(o,t,n))}),n[i]=!0)}function f(){var e,t,n=1e3*w.waitSeconds,a=n&&q.startTime+n<(new Date).getTime(),o=[],s=[],u=!1,d=!0;if(!x){if(x=!0,eachProp(k,function(e){var n=e.map,c=n.id;if(e.enabled&&(n.isDefine||s.push(e),!e.error))if(!e.inited&&a)r(c)?(t=!0,u=!0):(o.push(c),i(c));else if(!e.inited&&e.fetched&&n.isDefine&&(u=!0,!n.prefix))return d=!1}),a&&o.length)return e=makeError("timeout","Load timeout for modules: "+o,null,o),e.contextName=q.contextName,c(e);d&&each(s,function(e){l(e,{},{})}),a&&!t||!u||!isBrowser&&!isWebWorker||y||(y=setTimeout(function(){y=0,f()},50)),x=!1}}function h(e){hasProp(j,e[0])||s(o(e[0],null,!0)).init(e[1],e[2])}function m(e,t,n,i){e.detachEvent&&!isOpera?i&&e.detachEvent(i,t):e.removeEventListener(n,t,!1)}function g(e){var t=e.currentTarget||e.srcElement;return m(t,q.onScriptLoad,"load","onreadystatechange"),m(t,q.onScriptError,"error"),{node:t,id:t&&t.getAttribute("data-requiremodule")}}function v(){var e;for(d();O.length;){if(e=O.shift(),null===e[0])return c(makeError("mismatch","Mismatched anonymous define() module: "+e[e.length-1]));h(e)}q.defQueueMap={}}var x,b,q,E,y,w={waitSeconds:7,baseUrl:"./",paths:{},bundles:{},pkgs:{},shim:{},config:{}},S={},k={},M={},O=[],j={},P={},R={},A=1,B=1;return E={require:function(e){return e.require?e.require:e.require=q.makeRequire(e.map)},exports:function(e){return e.usingExports=!0,e.map.isDefine?e.exports?j[e.map.id]=e.exports:e.exports=j[e.map.id]={}:void 0},module:function(e){return e.module?e.module:e.module={id:e.map.id,uri:e.map.url,config:function(){return getOwn(w.config,e.map.id)||{}},exports:e.exports||(e.exports={})}}},b=function(e){this.events=getOwn(M,e.id)||{},this.map=e,this.shim=getOwn(w.shim,e.id),this.depExports=[],this.depMaps=[],this.depMatched=[],this.pluginMaps={},this.depCount=0},b.prototype={init:function(e,t,n,i){i=i||{},this.inited||(this.factory=t,n?this.on("error",n):this.events.error&&(n=bind(this,function(e){this.emit("error",e)})),this.depMaps=e&&e.slice(0),this.errback=n,this.inited=!0,this.ignore=i.ignore,i.enabled||this.enabled?this.enable():this.check())},defineDep:function(e,t){this.depMatched[e]||(this.depMatched[e]=!0,this.depCount-=1,this.depExports[e]=t)},fetch:function(){if(!this.fetched){this.fetched=!0,q.startTime=(new Date).getTime();var e=this.map;return this.shim?void q.makeRequire(this.map,{enableBuildCallback:!0})(this.shim.deps||[],bind(this,function(){return e.prefix?this.callPlugin():this.load()})):e.prefix?this.callPlugin():this.load()}},load:function(){var e=this.map.url;P[e]||(P[e]=!0,q.load(this.map.id,e))},check:function(){if(this.enabled&&!this.enabling){var e,t,n=this.map.id,i=this.depExports,r=this.exports,a=this.factory;if(this.inited){if(this.error)this.emit("error",this.error);else if(!this.defining){if(this.defining=!0,this.depCount<1&&!this.defined){if(isFunction(a)){if(this.events.error&&this.map.isDefine||req.onError!==defaultOnError)try{r=q.execCb(n,a,i,r)}catch(o){e=o}else r=q.execCb(n,a,i,r);if(this.map.isDefine&&void 0===r&&(t=this.module,t?r=t.exports:this.usingExports&&(r=this.exports)),e)return e.requireMap=this.map,e.requireModules=this.map.isDefine?[this.map.id]:null,e.requireType=this.map.isDefine?"define":"require",c(this.error=e)}else r=a;if(this.exports=r,this.map.isDefine&&!this.ignore&&(j[n]=r,req.onResourceLoad)){var s=[];each(this.depMaps,function(e){s.push(e.normalizedMap||e)}),req.onResourceLoad(q,this.map,s)}p(n),this.defined=!0}this.defining=!1,this.defined&&!this.defineEmitted&&(this.defineEmitted=!0,this.emit("defined",this.exports),this.defineEmitComplete=!0)}}else hasProp(q.defQueueMap,n)||this.fetch()}},callPlugin:function(){var e=this.map,t=e.id,i=o(e.prefix);this.depMaps.push(i),u(i,"defined",bind(this,function(i){var r,a,d,l=getOwn(R,this.map.id),f=this.map.name,h=this.map.parentMap?this.map.parentMap.name:null,m=q.makeRequire(e.parentMap,{enableBuildCallback:!0});return this.map.unnormalized?(i.normalize&&(f=i.normalize(f,function(e){return n(e,h,!0)})||""),a=o(e.prefix+"!"+f,this.map.parentMap),u(a,"defined",bind(this,function(e){this.map.normalizedMap=a,this.init([],function(){return e},null,{enabled:!0,ignore:!0})})),d=getOwn(S,a.id),void(d&&(this.depMaps.push(a),this.events.error&&d.on("error",bind(this,function(e){this.emit("error",e)})),d.enable()))):l?(this.map.url=q.nameToUrl(l),void this.load()):(r=bind(this,function(e){this.init([],function(){return e},null,{enabled:!0})}),r.error=bind(this,function(e){this.inited=!0,this.error=e,e.requireModules=[t],eachProp(S,function(e){0===e.map.id.indexOf(t+"_unnormalized")&&p(e.map.id)}),c(e)}),r.fromText=bind(this,function(n,i){var a=e.name,u=o(a),d=useInteractive;i&&(n=i),d&&(useInteractive=!1),s(u),hasProp(w.config,t)&&(w.config[a]=w.config[t]);try{req.exec(n)}catch(p){return c(makeError("fromtexteval","fromText eval for "+t+" failed: "+p,p,[t]))}d&&(useInteractive=!0),this.depMaps.push(u),q.completeLoad(a),m([a],r)}),void i.load(e.name,m,r,w))})),q.enable(i,this),this.pluginMaps[i.id]=i},enable:function(){k[this.map.id]=this,this.enabled=!0,this.enabling=!0,each(this.depMaps,bind(this,function(e,t){var n,i,r;if("string"==typeof e){if(e=o(e,this.map.isDefine?this.map:this.map.parentMap,!1,!this.skipMap),this.depMaps[t]=e,r=getOwn(E,e.id))return void(this.depExports[t]=r(this));this.depCount+=1,u(e,"defined",bind(this,function(e){this.undefed||(this.defineDep(t,e),this.check())})),this.errback?u(e,"error",bind(this,this.errback)):this.events.error&&u(e,"error",bind(this,function(e){this.emit("error",e)}))}n=e.id,i=S[n],hasProp(E,n)||!i||i.enabled||q.enable(e,this)})),eachProp(this.pluginMaps,bind(this,function(e){var t=getOwn(S,e.id);t&&!t.enabled&&q.enable(e,this)})),this.enabling=!1,this.check()},on:function(e,t){var n=this.events[e];n||(n=this.events[e]=[]),n.push(t)},emit:function(e,t){each(this.events[e],function(e){e(t)}),"error"===e&&delete this.events[e]}},q={config:w,contextName:e,registry:S,defined:j,urlFetched:P,defQueue:O,defQueueMap:{},Module:b,makeModuleMap:o,nextTick:req.nextTick,onError:c,configure:function(e){if(e.baseUrl&&"/"!==e.baseUrl.charAt(e.baseUrl.length-1)&&(e.baseUrl+="/"),"string"==typeof e.urlArgs){var t=e.urlArgs;e.urlArgs=function(e,n){return(-1===n.indexOf("?")?"?":"&")+t}}var n=w.shim,i={paths:!0,bundles:!0,config:!0,map:!0};eachProp(e,function(e,t){i[t]?(w[t]||(w[t]={}),mixin(w[t],e,!0,!0)):w[t]=e}),e.bundles&&eachProp(e.bundles,function(e,t){each(e,function(e){e!==t&&(R[e]=t)})}),e.shim&&(eachProp(e.shim,function(e,t){isArray(e)&&(e={deps:e}),!e.exports&&!e.init||e.exportsFn||(e.exportsFn=q.makeShimExports(e)),n[t]=e}),w.shim=n),e.packages&&each(e.packages,function(e){var t,n;e="string"==typeof e?{name:e}:e,n=e.name,t=e.location,t&&(w.paths[n]=e.location),w.pkgs[n]=e.name+"/"+(e.main||"main").replace(currDirRegExp,"").replace(jsSuffixRegExp,"")}),eachProp(S,function(e,t){e.inited||e.map.unnormalized||(e.map=o(t,null,!0))}),(e.deps||e.callback)&&q.require(e.deps||[],e.callback)},makeShimExports:function(e){function t(){var t;return e.init&&(t=e.init.apply(global,arguments)),t||e.exports&&getGlobal(e.exports)}return t},makeRequire:function(t,r){function a(n,i,u){var d,p,l;return r.enableBuildCallback&&i&&isFunction(i)&&(i.__requireJsBuild=!0),"string"==typeof n?isFunction(i)?c(makeError("requireargs","Invalid require call"),u):t&&hasProp(E,n)?E[n](S[t.id]):req.get?req.get(q,n,t,a):(p=o(n,t,!1,!0),d=p.id,hasProp(j,d)?j[d]:c(makeError("notloaded",'Module name "'+d+'" has not been loaded yet for context: '+e+(t?"":". Use require([])")))):(v(),q.nextTick(function(){v(),l=s(o(null,t)),l.skipMap=r.skipMap,l.init(n,i,u,{enabled:!0}),f()}),a)}return r=r||{},mixin(a,{isBrowser:isBrowser,toUrl:function(e){var i,r=e.lastIndexOf("."),a=e.split("/")[0],o="."===a||".."===a;return-1!==r&&(!o||r>1)&&(i=e.substring(r,e.length),e=e.substring(0,r)),q.nameToUrl(n(e,t&&t.id,!0),i,!0)},defined:function(e){return hasProp(j,o(e,t,!1,!0).id)},specified:function(e){return e=o(e,t,!1,!0).id,hasProp(j,e)||hasProp(S,e)}}),t||(a.undef=function(e){d();var n=o(e,t,!0),r=getOwn(S,e);r.undefed=!0,i(e),delete j[e],delete P[n.url],delete M[e],eachReverse(O,function(t,n){t[0]===e&&O.splice(n,1)}),delete q.defQueueMap[e],r&&(r.events.defined&&(M[e]=r.events),p(e))}),a},enable:function(e){var t=getOwn(S,e.id);t&&s(e).enable()},completeLoad:function(e){var t,n,i,a=getOwn(w.shim,e)||{},o=a.exports;for(d();O.length;){if(n=O.shift(),null===n[0]){if(n[0]=e,t)break;t=!0}else n[0]===e&&(t=!0);h(n)}if(q.defQueueMap={},i=getOwn(S,e),!t&&!hasProp(j,e)&&i&&!i.inited){if(!(!w.enforceDefine||o&&getGlobal(o)))return r(e)?void 0:c(makeError("nodefine","No define call for "+e,null,[e]));h([e,a.deps||[],a.exportsFn])}f()},nameToUrl:function(e,t,n){var i,r,a,o,s,u,c,d=getOwn(w.pkgs,e);if(d&&(e=d),c=getOwn(R,e))return q.nameToUrl(c,t,n);if(req.jsExtRegExp.test(e))s=e+(t||"");else{for(i=w.paths,r=e.split("/"),a=r.length;a>0;a-=1)if(o=r.slice(0,a).join("/"),u=getOwn(i,o)){isArray(u)&&(u=u[0]),r.splice(0,a,u);break}s=r.join("/"),s+=t||(/^data\:|^blob\:|\?/.test(s)||n?"":".js"),s=("/"===s.charAt(0)||s.match(/^[\w\+\.\-]+:/)?"":w.baseUrl)+s}return w.urlArgs&&!/^blob\:/.test(s)?s+w.urlArgs(e,s):s},load:function(e,t){req.load(q,e,t)},execCb:function(e,t,n,i){return t.apply(i,n)},onScriptLoad:function(e){if("load"===e.type||readyRegExp.test((e.currentTarget||e.srcElement).readyState)){interactiveScript=null;var t=g(e);q.completeLoad(t.id)}},onScriptError:function(e){var t=g(e);if(!r(t.id)){var n=[];return eachProp(S,function(e,i){0!==i.indexOf("_@r")&&each(e.depMaps,function(e){return e.id===t.id?(n.push(i),!0):void 0})}),c(makeError("scripterror",'Script error for "'+t.id+(n.length?'", needed by: '+n.join(", "):'"'),e,[t.id]))}}},q.require=q.makeRequire(),q}function getInteractiveScript(){return interactiveScript&&"interactive"===interactiveScript.readyState?interactiveScript:(eachReverse(scripts(),function(e){return"interactive"===e.readyState?interactiveScript=e:void 0}),interactiveScript)}var req,s,head,baseElement,dataMain,src,interactiveScript,currentlyAddingScript,mainScript,subPath,version="2.2.0",commentRegExp=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,cjsRequireRegExp=/[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,jsSuffixRegExp=/\.js$/,currDirRegExp=/^\.\//,op=Object.prototype,ostring=op.toString,hasOwn=op.hasOwnProperty,isBrowser=!("undefined"==typeof window||"undefined"==typeof navigator||!window.document),isWebWorker=!isBrowser&&"undefined"!=typeof importScripts,readyRegExp=isBrowser&&"PLAYSTATION 3"===navigator.platform?/^complete$/:/^(complete|loaded)$/,defContextName="_",isOpera="undefined"!=typeof opera&&"[object Opera]"===opera.toString(),contexts={},cfg={},globalDefQueue=[],useInteractive=!1;if("undefined"==typeof define){if("undefined"!=typeof requirejs){if(isFunction(requirejs))return;cfg=requirejs,requirejs=void 0}"undefined"==typeof require||isFunction(require)||(cfg=require,require=void 0),req=requirejs=function(e,t,n,i){var r,a,o=defContextName;return isArray(e)||"string"==typeof e||(a=e,isArray(t)?(e=t,t=n,n=i):e=[]),a&&a.context&&(o=a.context),r=getOwn(contexts,o),r||(r=contexts[o]=req.s.newContext(o)),a&&r.configure(a),r.require(e,t,n)},req.config=function(e){return req(e)},req.nextTick="undefined"!=typeof setTimeout?function(e){setTimeout(e,4)}:function(e){e()},require||(require=req),req.version=version,req.jsExtRegExp=/^\/|:|\?|\.js$/,req.isBrowser=isBrowser,s=req.s={contexts:contexts,newContext:newContext},req({}),each(["toUrl","undef","defined","specified"],function(e){req[e]=function(){var t=contexts[defContextName];return t.require[e].apply(t,arguments)}}),isBrowser&&(head=s.head=document.getElementsByTagName("head")[0],baseElement=document.getElementsByTagName("base")[0],baseElement&&(head=s.head=baseElement.parentNode)),req.onError=defaultOnError,req.createNode=function(e,t,n){var i=e.xhtml?document.createElementNS("http://www.w3.org/1999/xhtml","html:script"):document.createElement("script");return i.type=e.scriptType||"text/javascript",i.charset="utf-8",i.async=!0,i},req.load=function(e,t,n){var i,r=e&&e.config||{};if(isBrowser)return i=req.createNode(r,t,n),i.setAttribute("data-requirecontext",e.contextName),i.setAttribute("data-requiremodule",t),!i.attachEvent||i.attachEvent.toString&&i.attachEvent.toString().indexOf("[native code")<0||isOpera?(i.addEventListener("load",e.onScriptLoad,!1),i.addEventListener("error",e.onScriptError,!1)):(useInteractive=!0,i.attachEvent("onreadystatechange",e.onScriptLoad)),i.src=n,r.onNodeCreated&&r.onNodeCreated(i,r,t,n),currentlyAddingScript=i,baseElement?head.insertBefore(i,baseElement):head.appendChild(i),currentlyAddingScript=null,i;if(isWebWorker)try{setTimeout(function(){},0),importScripts(n),e.completeLoad(t)}catch(a){e.onError(makeError("importscripts","importScripts failed for "+t+" at "+n,a,[t]))}},isBrowser&&!cfg.skipDataMain&&eachReverse(scripts(),function(e){return head||(head=e.parentNode),dataMain=e.getAttribute("data-main"),dataMain?(mainScript=dataMain,cfg.baseUrl||-1!==mainScript.indexOf("!")||(src=mainScript.split("/"),mainScript=src.pop(),subPath=src.length?src.join("/")+"/":"./",cfg.baseUrl=subPath),mainScript=mainScript.replace(jsSuffixRegExp,""),req.jsExtRegExp.test(mainScript)&&(mainScript=dataMain),cfg.deps=cfg.deps?cfg.deps.concat(mainScript):[mainScript],!0):void 0}),define=function(e,t,n){var i,r;"string"!=typeof e&&(n=t,t=e,e=null),isArray(t)||(n=t,t=null),!t&&isFunction(n)&&(t=[],n.length&&(n.toString().replace(commentRegExp,commentReplace).replace(cjsRequireRegExp,function(e,n){t.push(n)}),t=(1===n.length?["require"]:["require","exports","module"]).concat(t))),useInteractive&&(i=currentlyAddingScript||getInteractiveScript(),i&&(e||(e=i.getAttribute("data-requiremodule")),r=contexts[i.getAttribute("data-requirecontext")])),r?(r.defQueue.push([e,t,n]),r.defQueueMap[e]=!0):globalDefQueue.push([e,t,n])},define.amd={jQuery:!0},req.exec=function(text){return eval(text)},req(cfg)}}(this),define("../../node_modules/requirejs/require.js",function(){}),define("tmpl",[],function(){!function(){var e={};this.tmpl=function t(n,i){var r=/\W/.test(n)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+n.replace(/[\r\t\n]/g," ").split("<%").join("	").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("	").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):e[n]=e[n]||t(document.getElementById(n).innerHTML);return i?r(i):r}}()}),define("Model",[],function(){return function(e){var t=this,n=localStorage.getItem("data");n?t.data=JSON.parse(n):t.data=e,t.addItem=function(e){return 0!==e.length?(t.data.push(e),t.data):void 0},t.removeItem=function(e){var n=t.data.indexOf(e);if(-1!==n)return t.data.splice(n,1),t.data},t.changeItem=function(e,n){var i=t.data.indexOf(e);return t.data[i]=n,t.data},t.saveData=function(e){var t=JSON.stringify(e);localStorage.setItem("data",t)},t.resetData=function(){t.data=["Список был сброшен!"];var e=JSON.stringify(t.data);return localStorage.setItem("data",e),t.data}}}),define("View",[],function(){return function(e){var t=this;t.elements={input:$(".list__input"),addBtn:$(".list__add-button"),rmvItem:".list__remove-item",editItem:".list__edit-item",listContainer:$("#list"),resetBtn:$(".list__reset-button")},t.renderList=function(e){var n=tmpl($("#list-template").html(),{data:e});t.elements.listContainer.html(n)},t.renderList(e.data)}}),define("Controller",[],function(){return function(e,t){function n(){var n=t.elements.input.val().replace(/\n+$/m,"").replace(/\s+$/,"");e.addItem(n),e.saveData(e.data),t.renderList(e.data),t.elements.input.val("")}function i(n){var i=$(n.target).parent(".list__buttons").siblings(".list__text").text();e.removeItem(i),e.saveData(e.data),t.renderList(e.data)}function r(i){function r(i){var o=t.elements.input.val();e.changeItem(a,o),e.saveData(e.data),t.renderList(e.data),t.elements.input.val(""),t.elements.addBtn.text("Save"),t.elements.addBtn.off("click",r),t.elements.addBtn.on("click",n)}var a=$(i.target).parent(".list__buttons").siblings(".list__text").text();t.elements.input.val(a),t.elements.addBtn.text("Edit"),t.elements.addBtn.off("click",n),t.elements.addBtn.on("click",r)}function a(){e.resetData(),t.renderList(e.data),t.elements.input.val("")}t.elements.addBtn.on("click",n),t.elements.listContainer.on("click",t.elements.rmvItem,i),t.elements.listContainer.on("click",t.elements.editItem,r),t.elements.resetBtn.on("click",a)}}),requirejs.config({paths:{jquery:"http://code.jquery.com/jquery-2.2.4.min"},shim:{jquery:{exports:"jquery"}}}),require(["tmpl","jquery","Model","View","Controller"],function(e,t,n,i,r){t(function(){var e=["Потести мой ToDo список!"],t=new n(e),a=new i(t);new r(t,a)})}),define("app.js",function(){});
//# sourceMappingURL=require.js.build.js.map
//# sourceMappingURL=data:application/json;base64,
